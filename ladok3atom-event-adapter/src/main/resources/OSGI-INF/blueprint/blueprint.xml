<?xml version="1.0" encoding="UTF-8"?>
<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
	xmlns:cm="http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:osgi="http://www.springframework.org/schema/osgi"
	xsi:schemaLocation="http://www.osgi.org/xmlns/blueprint/v1.0.0 http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd">

	<!-- We need to execute this route in a transaction that ensures that 
	     each read event also makes it all the way to the distribution quene. -->
	<bean id="NEW" class="org.apache.camel.spring.spi.SpringTransactionPolicy">
		<property name="transactionManager" ref="jmsTransactionManager" />
		<property name="propagationBehaviorName" value="PROPAGATION_REQUIRES_NEW" />
	</bean>

	<!-- JMS and ActiveMQ is used for distribution and transactions. -->
	<bean id="jmsTransactionManager"
		class="org.springframework.jms.connection.JmsTransactionManager">
		<property name="connectionFactory" ref="jmsConnectionFactory" />
	</bean>
	<bean id="jmsConnectionFactory" class="org.apache.activemq.ActiveMQConnectionFactory">
		<property name="brokerURL" value="tcp://localhost:61616" />
        <property name="userName" value="smx" />
        <property name="password" value="smx" />
	</bean>
	<bean id="activemq" class="org.apache.activemq.camel.component.ActiveMQComponent">
		<property name="connectionFactory" ref="jmsConnectionFactory" />
		<property name="transacted" value="true" />
	</bean>
	
	<!-- For now we use the simple file based event persistance and the generic ATOM client. -->
	<bean id="eventPersistance" class="se.sunet.ati.ladok.atom.FileBasedEventPersistance" />
	<bean id="atomClient" class="se.sunet.ati.ladok.atom.AtomClient" />	

	<camelContext xmlns="http://camel.apache.org/schema/blueprint">

		<route>
		
			<!-- Pull the Ladok ATOM feed every 5 seconds.. -->
			<from uri="timer://ladok?fixedRate=true&amp;period=5000&amp;repeatCount=0" />

			<!-- Everything after the created transaction will ensure that each read ATOM entry
			     makes it all the way to the queye. -->
			<transacted ref="NEW" />
			
			<!-- Collect the identifier for hte last read ATOM entry. -->
			<to uri="bean:eventPersistance?method=getLastReadEntryId" />
			
			<!-- Print the last read entry id to the console. -->
			<to uri="log:log-test?level=INFO" />
			
			<!-- Query new Ladok for new entries and return a splittable list. -->			
			<to uri="bean:atomClient?method=getEntries" />

			<!-- For each new entry in the list, log and put the event on the distribution queue. -->
			<split streaming="true" stopOnException="true">

				<simple>${body}</simple>
				
				<!-- Print to console. -->
				<to uri="log:hanterar-meddelande?level=INFO" />
				
				<!-- Put on dummy log. Just for testing. -->
				<to uri="activemq:queue:ladok3-dummy-log" />
				
				<!-- Save current event to event persistance.  -->
				<to uri="bean:eventPersistance?method=saveEntry" />
				
				<!-- Convert to string to avoid JMS serialization problems before put to 
				     distribution queue. -->
				<convertBodyTo type="java.lang.String" />
				<to uri="activemq:queue:ladok3-event-distribution" />

			</split>
			
		</route>

	</camelContext>

</blueprint>
